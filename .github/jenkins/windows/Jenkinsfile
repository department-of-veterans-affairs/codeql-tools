@Library('codeql-windows-dev')_

void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/department-of-veterans-affairs/codeql-tools"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/codeql-windows"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent { label 'windows' }

    stages {
        stage('CodeQL - Javascript') {
            
            steps{
                cleanWs()
                checkout scm
                withCredentials([string(credentialsId: 'github-token', variable: 'TOKEN')]) {
                    ExecuteCodeQL('department-of-veterans-affairs', 'codeql-tools', env.GIT_BRANCH, 'javascript', '', env.TOKEN, true)
                }
                powershell "Rename-Item -Path codeql-scan-results-javascript.csv -NewName codeql-scan-results-javascript-windows.csv"
                archiveArtifacts artifacts: 'codeql-scan-results-javascript-windows.csv', fingerprint: true
            }
        }

        stage('CodeQL with Subdirectories - Javascript') {
            steps{
                cleanWs()
                checkout scm
                dir('verify-scans') {
                    withCredentials([string(credentialsId: 'github-token', variable: 'TOKEN')]) {
                        ExecuteCodeQL('department-of-veterans-affairs', 'codeql-tools', env.GIT_BRANCH, 'javascript', '', env.TOKEN, true)
                    }
                    powershell "Rename-Item -Path codeql-scan-results-javascript.csv -NewName codeql-scan-results-javascript-windows-subdir.csv"
                    archiveArtifacts artifacts: 'codeql-scan-results-javascript-windows-subdir.csv', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
}
